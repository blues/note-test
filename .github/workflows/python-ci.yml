# Reusable workflow to run the python CI, which covers
# Python installation and dependencies
# Linting (flake8 and docstyle)
# Testing and coverage with pytest
# Reports test coverage to DataDog if secrets.DD_API_KEY is defined.

on:
    workflow_call:
        secrets:
            NOTEHUB_SESSION_TOKEN:
            NOTEHUB_PRODUCT_UID:
            NOTECARD_DEVICE_ID:
        inputs:
            coveralls:
                type: boolean
                required: false
                default: false
            notehub_notify:
                type: boolean
                required: false
                default: false

jobs:
    build:
      runs-on: ubuntu-20.04
      defaults:
        run:
          shell: bash
          working-directory: python
      strategy:
        matrix:
          python-version: [3.11]

      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}

      steps:
      - name: Send building notification
        if: ${{ inputs.notehub_notify }}
        run: |
          curl --request POST \
          --url 'https://api.notefile.net/?product=${{ secrets.NOTEHUB_PRODUCT_UID }}&device=${{ secrets.NOTECARD_DEVICE_ID }}' \
          --header 'Content-Type: application/json' \
          --header 'X-Session-Token: ${{ secrets.NOTEHUB_SESSION_TOKEN }}' \
          --data '{"req":"note.add","file":"build_results.qi","body":{"result":"building"}}'
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -n "$DD_API_KEY" ]; then pip install -U ddtrace; fi
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-test.txt ]; then pip install -r requirements-test.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          make flake8
      - name: Lint Docs with Pydocstyle
        run: |
          make docstyle
      - name: Send running tests notification
        if: ${{ inputs.notehub_notify }}
        run: |
          curl --request POST \
          --url 'https://api.notefile.net/?product=${{ secrets.NOTEHUB_PRODUCT_UID }}&device=${{ secrets.NOTECARD_DEVICE_ID }}' \
          --header 'Content-Type: application/json' \
          --header 'X-Session-Token: ${{ secrets.NOTEHUB_SESSION_TOKEN }}' \
          --data '{"req":"note.add","file":"build_results.qi","body":{"result":"running_tests"}}'

      - name: Check DD API Key
        if: ${{ !env.DD_API_KEY }}
        run: |
          echo Test run will NOT be collected by DD

      - name: Test with coverage
        env:
          DD_CIVISIBILITY_AGENTLESS_ENABLED: ${{ !!env.DD_API_KEY }}
          DD_SERVICE: note-test
          DD_ENV: ci
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -n "$DD_API_KEY" ]; then DD_FLAGS=--ddtrace --ddtrace-patch-all; fi
          coverage run -m pytest $DD_FLAGS --doctest-modules
      - name: Publish to Coveralls
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ inputs.coveralls }}
        run: |
          coveralls --service=github

      - name: Check if the job has succeeded
        if: ${{ success() && inputs.notehub_notify }}
        run: |
          curl --request POST \
          --url 'https://api.notefile.net/?product=${{ secrets.NOTEHUB_PRODUCT_UID }}&device=${{ secrets.NOTECARD_DEVICE_ID }}' \
          --header 'Content-Type: application/json' \
          --header 'X-Session-Token: ${{ secrets.NOTEHUB_SESSION_TOKEN }}' \
          --data '{"req":"note.add","file":"build_results.qi","body":{"result":"success"}}'
      - name: Check if the job has failed
        if: ${{ failure() && inputs.notehub_notify }}
        run: |
          curl --request POST \
          --url 'https://api.notefile.net/?product=${{ secrets.NOTEHUB_PRODUCT_UID }}&device=${{ secrets.NOTECARD_DEVICE_ID }}' \
          --header 'Content-Type: application/json' \
          --header 'X-Session-Token: ${{ secrets.NOTEHUB_SESSION_TOKEN }}' \
          --data '{"req":"note.add","file":"build_results.qi","body":{"result":"tests_failed"}}'
